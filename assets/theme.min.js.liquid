function onYouTubeIframeAPIReady() {
    theme.Video.loadVideos();
}
(window.theme = window.theme || {}),
    (window.theme = window.theme || {}),
    (theme.Sections = function () {
        (this.constructors = {}),
            (this.instances = []),
            $(document)
                .on("shopify:section:load", this._onSectionLoad.bind(this))
                .on("shopify:section:unload", this._onSectionUnload.bind(this))
                .on("shopify:section:select", this._onSelect.bind(this))
                .on("shopify:section:deselect", this._onDeselect.bind(this))
                .on("shopify:block:select", this._onBlockSelect.bind(this))
                .on("shopify:block:deselect", this._onBlockDeselect.bind(this));
    }),
    (theme.Sections.prototype = _.assignIn({}, theme.Sections.prototype, {
        _createInstance: function (e, t) {
            var i = $(e),
                a = i.attr("data-section-id"),
                n = i.attr("data-section-type");
            if (((t = t || this.constructors[n]), !_.isUndefined(t))) {
                var s = _.assignIn(new t(e), { id: a, type: n, container: e });
                this.instances.push(s);
            }
        },
        _onSectionLoad: function (e) {
            var t = $("[data-section-id]", e.target)[0];
            t && this._createInstance(t);
        },
        _onSectionUnload: function (e) {
            this.instances = _.filter(this.instances, function (t) {
                var i = t.id === e.detail.sectionId;
                return i && _.isFunction(t.onUnload) && t.onUnload(e), !i;
            });
        },
        _onSelect: function (e) {
            var t = _.find(this.instances, function (t) {
                return t.id === e.detail.sectionId;
            });
            !_.isUndefined(t) && _.isFunction(t.onSelect) && t.onSelect(e);
        },
        _onDeselect: function (e) {
            var t = _.find(this.instances, function (t) {
                return t.id === e.detail.sectionId;
            });
            !_.isUndefined(t) && _.isFunction(t.onDeselect) && t.onDeselect(e);
        },
        _onBlockSelect: function (e) {
            var t = _.find(this.instances, function (t) {
                return t.id === e.detail.sectionId;
            });
            !_.isUndefined(t) && _.isFunction(t.onBlockSelect) && t.onBlockSelect(e);
        },
        _onBlockDeselect: function (e) {
            var t = _.find(this.instances, function (t) {
                return t.id === e.detail.sectionId;
            });
            !_.isUndefined(t) && _.isFunction(t.onBlockDeselect) && t.onBlockDeselect(e);
        },
        register: function (e, t) {
            (this.constructors[e] = t),
                $("[data-section-type=" + e + "]").each(
                    function (e, i) {
                        this._createInstance(i, t);
                    }.bind(this)
                );
        },
    })),
    (window.slate = window.slate || {}),
    (slate.utils = {
        getParameterByName: function (e, t) {
            t || (t = window.location.href), (e = e.replace(/[[\]]/g, "\\$&"));
            var i = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(t);
            return i ? (i[2] ? decodeURIComponent(i[2].replace(/\+/g, " ")) : "") : null;
        },
        keyboardKeys: { TAB: 9, ENTER: 13, ESCAPE: 27, LEFTARROW: 37, RIGHTARROW: 39 },
    }),
    (window.slate = window.slate || {}),
    (slate.rte = {
        wrapTable: function (e) {
            e.$tables.wrap('<div class="' + e.tableWrapperClass + '"></div>');
        },
        wrapIframe: function (e) {
            e.$iframes.each(function () {
                $(this).wrap('<div class="' + e.iframeWrapperClass + '"></div>'), (this.src = this.src);
            });
        },
    }),
    (window.slate = window.slate || {}),
    (slate.a11y = {
        pageLinkFocus: function (e) {
            var t = "js-focus-hidden";
            e.first()
                .attr("tabIndex", "-1")
                .focus()
                .addClass(t)
                .one("blur", function () {
                    e.first().removeClass(t).removeAttr("tabindex");
                });
        },
        focusHash: function () {
            var e = window.location.hash;
            e && document.getElementById(e.slice(1)) && this.pageLinkFocus($(e));
        },
        bindInPageLinks: function () {
            $("a[href*=#]").on(
                "click",
                function (e) {
                    this.pageLinkFocus($(e.currentTarget.hash));
                }.bind(this)
            );
        },
        trapFocus: function (e) {
            var t = { focusin: e.namespace ? "focusin." + e.namespace : "focusin", focusout: e.namespace ? "focusout." + e.namespace : "focusout", keydown: e.namespace ? "keydown." + e.namespace : "keydown.handleFocus" },
                i = e.$container.find($('button, [href], input, select, textarea, [tabindex]:not([tabindex^="-"])').filter(":visible")),
                a = i[0],
                n = i[i.length - 1];
            e.$elementToFocus || (e.$elementToFocus = e.$container),
                e.$container.attr("tabindex", "-1"),
                e.$elementToFocus.focus(),
                $(document).off("focusin"),
                $(document).on(t.focusout, function () {
                    $(document).off(t.keydown);
                }),
                $(document).on(t.focusin, function (e) {
                    (e.target !== n && e.target !== a) ||
                        $(document).on(t.keydown, function (e) {
                            !(function (e) {
                                e.keyCode === slate.utils.keyboardKeys.TAB && (e.target !== n || e.shiftKey || (e.preventDefault(), a.focus()), e.target === a && e.shiftKey && (e.preventDefault(), n.focus()));
                            })(e);
                        });
                });
        },
        removeTrapFocus: function (e) {
            var t = e.namespace ? "focusin." + e.namespace : "focusin";
            e.$container && e.$container.length && e.$container.removeAttr("tabindex"), $(document).off(t);
        },
        accessibleLinks: function (e) {
            var t = document.querySelector("body"),
                i = { newWindow: "a11y-new-window-message", external: "a11y-external-message", newWindowExternal: "a11y-new-window-external-message" };
            (void 0 !== e.$links && e.$links.jquery) || (e.$links = $("a[href]:not([aria-describedby])")),
                $.each(e.$links, function () {
                    var e = $(this),
                        t = e.attr("target"),
                        a = e.attr("rel"),
                        n = (function (e) {
                            var t = window.location.hostname;
                            return e[0].hostname !== t;
                        })(e),
                        s = "_blank" === t;
                    n && e.attr("aria-describedby", i.external),
                        s && ((void 0 !== a && -1 !== a.indexOf("noopener")) || e.attr("rel", "noopener"), e.attr("aria-describedby", i.newWindow)),
                        n && s && e.attr("aria-describedby", i.newWindowExternal);
                }),
                (function (e) {
                    "object" != typeof e && (e = {});
                    var a = $.extend({ newWindow: "Opens in a new window.", external: "Opens external website.", newWindowExternal: "Opens external website in a new window." }, e),
                        n = document.createElement("ul"),
                        s = "";
                    for (var o in a) s += "<li id=" + i[o] + ">" + a[o] + "</li>";
                    n.setAttribute("hidden", !0), (n.innerHTML = s), t.appendChild(n);
                })(e.messages);
        },
    }),
    (theme.Images = (function () {
        return {
            preload: function (e, t) {
                "string" == typeof e && (e = [e]);
                for (var i = 0; i < e.length; i++) {
                    var a = e[i];
                    this.loadImage(this.getSizedImageUrl(a, t));
                }
            },
            loadImage: function (e) {
                new Image().src = e;
            },
            switchImage: function (e, t, i) {
                var a = this.imageSize(t.src),
                    n = this.getSizedImageUrl(e.src, a);
                i ? i(n, e, t) : (t.src = n);
            },
            imageSize: function (e) {
                var t = e.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\\.@]/);
                return null !== t ? (void 0 !== t[2] ? t[1] + t[2] : t[1]) : null;
            },
            getSizedImageUrl: function (e, t) {
                if (null === t) return e;
                if ("master" === t) return this.removeProtocol(e);
                var i = e.match(/\.(jpg|jpeg|gif|png|bmp|bitmap|tiff|tif)(\?v=\d+)?$/i);
                if (null !== i) {
                    var a = e.split(i[0]),
                        n = i[0];
                    return this.removeProtocol(a[0] + "_" + t + n);
                }
                return null;
            },
            removeProtocol: function (e) {
                return e.replace(/http(s)?:/, "");
            },
        };
    })()),
    (theme.Currency = (function () {
        var e = "${{amount}}";
        return {
            formatMoney: function (t, i) {
                if (window.LangShopSDK && !isNaN(arguments[0]) && window.LangShopSDK.getCurrencies().length > 1) return window.LangShopSDK.formatMoney(t, i);
                "string" == typeof t && (t = t.replace(".", ""));
                var a = "",
                    n = /\{\{\s*(\w+)\s*\}\}/,
                    s = i || e;
                function o(e, t, i, a) {
                    if (((i = i || ","), (a = a || "."), isNaN(e) || null === e)) return 0;
                    var n = (e = (e / 100).toFixed(t)).split(".");
                    return n[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + i) + (n[1] ? a + n[1] : "");
                }
                switch (s.match(n)[1]) {
                    case "amount":
                        a = o(t, 2);
                        break;
                    case "amount_no_decimals":
                        a = o(t, 0);
                        break;
                    case "amount_with_comma_separator":
                        a = o(t, 2, ".", ",");
                        break;
                    case "amount_no_decimals_with_comma_separator":
                        a = o(t, 0, ".", ",");
                        break;
                    case "amount_no_decimals_with_space_separator":
                        a = o(t, 0, " ");
                        break;
                    case "amount_with_apostrophe_separator":
                        a = o(t, 2, "'");
                }
                return s.replace(n, a);
            },
        };
    })()),
    (slate.Variants = (function () {
        function e(e) {
            (this.$container = e.$container),
                (this.product = e.product),
                (this.singleOptionSelector = e.singleOptionSelector),
                (this.originalSelectorId = e.originalSelectorId),
                (this.enableHistoryState = e.enableHistoryState),
                (this.currentVariant = this._getVariantFromOptions()),
                $(this.singleOptionSelector, this.$container).on("change", this._onSelectChange.bind(this));
        }
        return (
            (e.prototype = _.assignIn({}, e.prototype, {
                _getCurrentOptions: function () {
                    var e = _.map($(this.singleOptionSelector, this.$container), function (e) {
                        var t = $(e),
                            i = t.attr("type"),
                            a = {};
                        return "radio" === i || "checkbox" === i ? !!t[0].checked && ((a.value = t.val()), (a.index = t.data("index")), a) : ((a.value = t.val()), (a.index = t.data("index")), a);
                    });
                    return (e = _.compact(e));
                },
                _getVariantFromOptions: function () {
                    var e = this._getCurrentOptions(),
                        t = this.product.variants;
                    return _.find(t, function (t) {
                        return e.every(function (e) {
                            return _.isEqual(t[e.index], e.value);
                        });
                    });
                },
                _onSelectChange: function () {
                    var e = this._getVariantFromOptions();
                    this.$container.trigger({ type: "variantChange", variant: e }),
                        e && (this._updateMasterSelect(e), this._updateImages(e), this._updatePrice(e), this._updateSKU(e), (this.currentVariant = e), this.enableHistoryState && this._updateHistoryState(e));
                },
                _updateImages: function (e) {
                    var t = e.featured_image || {},
                        i = this.currentVariant.featured_image || {};
                    e.featured_image && t.src !== i.src && this.$container.trigger({ type: "variantImageChange", variant: e });
                },
                _updatePrice: function (e) {
                    (e.price === this.currentVariant.price && e.compare_at_price === this.currentVariant.compare_at_price) || this.$container.trigger({ type: "variantPriceChange", variant: e });
                },
                _updateSKU: function (e) {
                    e.sku !== this.currentVariant.sku && this.$container.trigger({ type: "variantSKUChange", variant: e });
                },
                _updateHistoryState: function (e) {
                    if (history.replaceState && e) {
                        var t = window.location.protocol + "//" + window.location.host + window.location.pathname + "?variant=" + e.id;
                        window.history.replaceState({ path: t }, "", t);
                    }
                },
                _updateMasterSelect: function (e) {
                    $(this.originalSelectorId, this.$container).val(e.id);
                },
            })),
            e
        );
    })()),
    (theme.Drawers = (function () {
        function e(e, t, i) {
            var a = { close: ".js-drawer-close", open: ".js-drawer-open-" + t, openClass: "js-drawer-open", dirOpenClass: "js-drawer-open-" + t };
            if (((this.nodes = { $parent: $("html").add("body"), $page: $("#PageContainer") }), (this.config = $.extend(a, i)), (this.position = t), (this.$drawer = $("#" + e)), !this.$drawer.length)) return !1;
            (this.drawerIsOpen = !1), this.init();
        }
        return (
            (e.prototype.init = function () {
                $(this.config.open).on("click", $.proxy(this.open, this)), this.$drawer.on("click", this.config.close, $.proxy(this.close, this));
            }),
            (e.prototype.open = function (e) {
                var t = !1;
                return (
                    e ? e.preventDefault() : (t = !0),
                    e && e.stopPropagation && (e.stopPropagation(), (this.$activeSource = $(e.currentTarget))),
                    this.drawerIsOpen && !t
                        ? this.close()
                        : (this.$drawer.prepareTransition(),
                          this.nodes.$parent.addClass(this.config.openClass + " " + this.config.dirOpenClass),
                          (this.drawerIsOpen = !0),
                          slate.a11y.trapFocus({ $container: this.$drawer, namespace: "drawer_focus" }),
                          this.config.onDrawerOpen && "function" == typeof this.config.onDrawerOpen && (t || this.config.onDrawerOpen()),
                          this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "true"),
                          this.bindEvents(),
                          this)
                );
            }),
            (e.prototype.close = function () {
                this.drawerIsOpen &&
                    ($(document.activeElement).trigger("blur"),
                    this.$drawer.prepareTransition(),
                    this.nodes.$parent.removeClass(this.config.dirOpenClass + " " + this.config.openClass),
                    this.$activeSource && this.$activeSource.attr("aria-expanded") && this.$activeSource.attr("aria-expanded", "false"),
                    (this.drawerIsOpen = !1),
                    slate.a11y.removeTrapFocus({ $container: this.$drawer, namespace: "drawer_focus" }),
                    this.unbindEvents(),
                    this.config.onDrawerClose && "function" == typeof this.config.onDrawerClose && this.config.onDrawerClose());
            }),
            (e.prototype.bindEvents = function () {
                this.nodes.$parent.on(
                    "keyup.drawer",
                    $.proxy(function (e) {
                        return 27 !== e.keyCode || (this.close(), !1);
                    }, this)
                ),
                    this.nodes.$page.on("touchmove.drawer", function () {
                        return !1;
                    }),
                    this.nodes.$page.on(
                        "click.drawer",
                        $.proxy(function () {
                            return this.close(), !1;
                        }, this)
                    );
            }),
            (e.prototype.unbindEvents = function () {
                this.nodes.$page.off(".drawer"), this.nodes.$parent.off(".drawer");
            }),
            e
        );
    })()),
    (window.theme = window.theme || {}),
    (theme.Header = (function () {
        var e = {
                body: "body",
                multicurrencySelector: "[data-currency-selector]",
                navigation: "#AccessibleNav",
                siteNavHasDropdown: "[data-has-dropdowns]",
                siteNavChildLinks: ".site-nav__child-link",
                siteNavActiveDropdown: ".site-nav--active-dropdown",
                siteNavHasCenteredDropdown: ".site-nav--has-centered-dropdown",
                siteNavCenteredDropdown: ".site-nav__dropdown--centered",
                siteNavLinkMain: ".site-nav__link--main",
                siteNavChildLink: ".site-nav__link--last",
                siteNavDropdown: ".site-nav__dropdown",
                siteHeader: ".site-header",
            },
            t = { activeClass: "site-nav--active-dropdown", childLinkClass: "site-nav__child-link", rightDropdownClass: "site-nav__dropdown--right", leftDropdownClass: "site-nav__dropdown--left" },
            i = {};
        function a(a) {
            a.find(e.siteNavLinkMain).attr("aria-expanded", "false"), a.removeClass(t.activeClass), (i.$activeDropdown = $(e.siteNavActiveDropdown)), $(e.body).off("click.siteNav"), $(window).off("keyup.siteNav");
        }
        function n(a) {
            a.each(function () {
                var a = $(this).find(e.siteNavDropdown);
                a.length &&
                    (Math.ceil($(this).offset().left) > Math.floor(i.$siteHeader.outerWidth()) / 2 ? a.removeClass(t.leftDropdownClass).addClass(t.rightDropdownClass) : a.removeClass(t.rightDropdownClass).addClass(t.leftDropdownClass));
            });
        }
        function s() {
            $(e.siteNavHasCenteredDropdown).each(function () {
                var t = $(this),
                    i = t.find(e.siteNavCenteredDropdown),
                    a = t.position().top + 41;
                i.css("top", a);
            });
        }
        return {
            init: function () {
                (i = {
                    $nav: $(e.navigation),
                    $topLevel: $(e.siteNavLinkMain),
                    $parents: $(e.navigation).find(e.siteNavHasDropdown),
                    $subMenuLinks: $(e.siteNavChildLinks),
                    $activeDropdown: $(e.siteNavActiveDropdown),
                    $siteHeader: $(e.siteHeader),
                }),
                    n($(e.siteNavHasDropdown)),
                    s(),
                    i.$parents.on("click.siteNav", function () {
                        var n = $(this);
                        n.hasClass(t.activeClass)
                            ? a(n)
                            : (function (n) {
                                  n.addClass(t.activeClass),
                                      i.$activeDropdown.length && a(i.$activeDropdown),
                                      (i.$activeDropdown = n),
                                      n.find(e.siteNavLinkMain).attr("aria-expanded", "true"),
                                      setTimeout(function () {
                                          $(window).on("keyup.siteNav", function (e) {
                                              27 === e.keyCode && a(n);
                                          }),
                                              $(e.body).on("click.siteNav", function () {
                                                  a(n);
                                              });
                                      }, 250);
                              })(n);
                    }),
                    $(e.siteNavChildLink).on("focusout.siteNav", function () {
                        setTimeout(function () {
                            !$(document.activeElement).hasClass(t.childLinkClass) && i.$activeDropdown.length && a(i.$activeDropdown);
                        });
                    }),
                    i.$topLevel.on("focus.siteNav", function () {
                        i.$activeDropdown.length && a(i.$activeDropdown);
                    }),
                    i.$subMenuLinks.on("click.siteNav", function (e) {
                        e.stopImmediatePropagation();
                    }),
                    $(e.multicurrencySelector).on("change", function () {
                        $(this).parents("form").submit();
                    }),
                    $(window).resize(
                        $.debounce(50, function () {
                            n($(e.siteNavHasDropdown)), s();
                        })
                    );
            },
            unload: function () {
                $(window).off(".siteNav"), i.$parents.off(".siteNav"), i.$subMenuLinks.off(".siteNav"), i.$topLevel.off(".siteNav"), $(e.siteNavChildLink).off(".siteNav"), $(e.body).off(".siteNav");
            },
        };
    })()),
    (window.theme = window.theme || {}),
    (theme.MobileNav = (function () {
        var e,
            t,
            i,
            a = {
                mobileNavOpenIcon: "mobile-nav--open",
                mobileNavCloseIcon: "mobile-nav--close",
                navLinkWrapper: "mobile-nav__item",
                navLink: "mobile-nav__link",
                subNavLink: "mobile-nav__sublist-link",
                return: "mobile-nav__return-btn",
                subNavActive: "is-active",
                subNavClosing: "is-closing",
                navOpen: "js-menu--is-open",
                subNavShowing: "sub-nav--is-open",
                thirdNavShowing: "third-nav--is-open",
                subNavToggleBtn: "js-toggle-submenu",
            },
            n = {},
            s = 1,
            o = "screen and (max-width: 749px)";
        function r() {
            var e;
            n.$mobileNavToggle.hasClass(a.mobileNavCloseIcon)
                ? c()
                : ((e = n.$siteHeader.outerHeight()),
                  n.$mobileNavContainer.prepareTransition().addClass(a.navOpen),
                  n.$mobileNavContainer.css({ transform: "translateY(" + e + "px)" }),
                  n.$pageContainer.css({ transform: "translate3d(0, " + n.$mobileNavContainer[0].scrollHeight + "px, 0)" }),
                  slate.a11y.trapFocus({ $container: n.$sectionHeader, $elementToFocus: n.$mobileNavToggle, namespace: "navFocus" }),
                  n.$mobileNavToggle.addClass(a.mobileNavCloseIcon).removeClass(a.mobileNavOpenIcon).attr("aria-expanded", !0),
                  $(window).on("keyup.mobileNav", function (e) {
                      27 === e.which && c();
                  }));
        }
        function c() {
            n.$mobileNavContainer.prepareTransition().removeClass(a.navOpen),
                n.$mobileNavContainer.css({ transform: "translateY(-100%)" }),
                n.$pageContainer.removeAttr("style"),
                slate.a11y.trapFocus({ $container: $("html"), $elementToFocus: $("body") }),
                n.$mobileNavContainer.one("TransitionEnd.navToggle webkitTransitionEnd.navToggle transitionend.navToggle oTransitionEnd.navToggle", function () {
                    slate.a11y.removeTrapFocus({ $container: n.$mobileNav, namespace: "navFocus" });
                }),
                n.$mobileNavToggle.addClass(a.mobileNavOpenIcon).removeClass(a.mobileNavCloseIcon).attr("aria-expanded", !1).focus(),
                $(window).off("keyup.mobileNav"),
                scrollTo(0, 0);
        }
        function d(o) {
            if (!e) {
                var r = $(o.currentTarget),
                    c = r.hasClass(a.return);
                (e = !0),
                    c ? ($("." + a.subNavToggleBtn + '[data-level="' + (s - 1) + '"]').removeClass(a.subNavActive), i && i.length && i.removeClass(a.subNavActive)) : r.addClass(a.subNavActive),
                    (i = r),
                    (function (i) {
                        var o = i ? $('.mobile-nav__dropdown[data-parent="' + i + '"]') : n.$mobileNav;
                        (s = o.data("level") ? o.data("level") : 1), t && t.length && t.prepareTransition().addClass(a.subNavClosing);
                        t = o;
                        var r = o.outerHeight(),
                            c = s > 2 ? a.thirdNavShowing : a.subNavShowing;
                        n.$mobileNavContainer.css("height", r).removeClass(a.thirdNavShowing).addClass(c), i || n.$mobileNavContainer.removeClass(a.thirdNavShowing).removeClass(a.subNavShowing);
                        var d = 1 === s ? n.$sectionHeader : o,
                            l = o.find("[data-menu-title=" + s + "]"),
                            h = l || o;
                        n.$mobileNavContainer.one("TransitionEnd.subnavToggle webkitTransitionEnd.subnavToggle transitionend.subnavToggle oTransitionEnd.subnavToggle", function () {
                            slate.a11y.trapFocus({ $container: d, $elementToFocus: h, namespace: "subNavFocus" }), n.$mobileNavContainer.off(".subnavToggle"), (e = !1);
                        }),
                            n.$pageContainer.css({ transform: "translateY(" + r + "px)" }),
                            t.removeClass(a.subNavClosing);
                    })(r.data("target"));
            }
        }
        return {
            init: function () {
                (n = {
                    $pageContainer: $("#PageContainer"),
                    $siteHeader: $(".site-header"),
                    $mobileNavToggle: $(".js-mobile-nav-toggle"),
                    $mobileNavContainer: $(".mobile-nav-wrapper"),
                    $mobileNav: $("#MobileNav"),
                    $sectionHeader: $("#shopify-section-header"),
                    $subNavToggleBtn: $("." + a.subNavToggleBtn),
                }).$mobileNavToggle.on("click", r),
                    n.$subNavToggleBtn.on("click.subNav", d),
                    enquire.register(o, {
                        unmatch: function () {
                            n.$mobileNavContainer.hasClass(a.navOpen) && c();
                        },
                    });
            },
            closeMobileNav: c,
        };
    })(jQuery)),
    (window.theme = window.theme || {}),
    (theme.Search = (function () {
        var e = {
                search: ".search",
                searchSubmit: ".search__submit",
                searchInput: ".search__input",
                siteHeader: ".site-header",
                siteHeaderSearchToggle: ".site-header__search-toggle",
                siteHeaderSearch: ".site-header__search",
                searchDrawer: ".search-bar",
                searchDrawerInput: ".search-bar__input",
                searchHeader: ".search-header",
                searchHeaderInput: ".search-header__input",
                searchHeaderSubmit: ".search-header__submit",
                searchResultSubmit: "#SearchResultSubmit",
                searchResultInput: "#SearchInput",
                searchResultMessage: "[data-search-error-message]",
                mobileNavWrapper: ".mobile-nav-wrapper",
            },
            t = { focus: "search--focus", hidden: "hide", mobileNavIsOpen: "js-menu--is-open" };
        function i() {
            a($(e.searchDrawerInput)), $(e.mobileNavWrapper).hasClass(t.mobileNavIsOpen) && theme.MobileNav.closeMobileNav();
        }
        function a(e) {
            e.focus(), e[0].setSelectionRange(0, e[0].value.length);
        }
        function n() {
            $(e.siteHeaderSearchToggle).focus();
        }
        function s(e) {
            0 === this.$searchResultInput.val().trim().length
                ? (void 0 !== e && e.preventDefault(),
                  a(this.$searchResultInput),
                  function () {
                      this.$searchErrorMessage.removeClass(t.hidden), this.$searchResultInput.attr("aria-describedby", "error-search-form").attr("aria-invalid", !0);
                  }.call(this))
                : function () {
                      this.$searchErrorMessage.addClass(t.hidden), this.$searchResultInput.removeAttr("aria-describedby").removeAttr("aria-invalid");
                  }.call(this);
        }
        return {
            init: function () {
                $(e.siteHeader).length &&
                    ((this.$searchResultInput = $(e.searchResultInput)),
                    (this.$searchErrorMessage = $(e.searchResultMessage)),
                    $("#PageContainer").addClass("drawer-page-content"),
                    $(".js-drawer-open-top").attr("aria-controls", "SearchDrawer").attr("aria-expanded", "false").attr("aria-haspopup", "dialog"),
                    (theme.SearchDrawer = new theme.Drawers("SearchDrawer", "top", { onDrawerOpen: i, onDrawerClose: n })),
                    null !== slate.utils.getParameterByName("q") && "/search" === window.location.pathname && s.call(this),
                    $(e.searchResultSubmit).on("click", s.bind(this)),
                    $(e.searchHeaderInput)
                        .add(e.searchHeaderSubmit)
                        .on("focus blur", function () {
                            $(e.searchHeader).toggleClass(t.focus);
                        }),
                    $(e.siteHeaderSearchToggle).on("click", function () {
                        var t = $(e.siteHeader).outerHeight(),
                            i = $(e.siteHeader).offset().top - t;
                        $(e.searchDrawer).css({ height: t + "px", top: i + "px" });
                    }));
            },
        };
    })()),
    (function () {
        var e = $(".return-link");
        function t(e) {
            var t = document.createElement("a");
            return (t.ref = e), t.hostname;
        }
        document.referrer &&
            e.length &&
            window.history.length &&
            e.one("click", function (e) {
                e.preventDefault();
                var i = t(document.referrer);
                return t(window.location.href) === i && history.back(), !1;
            });
    })(),
    (theme.Slideshow = (function () {
        this.$slideshow = null;
        var e = { slideshow: "slideshow", slickActiveMobile: "slick-active-mobile", controlsHover: "slideshow__controls--hover", isPaused: "is-paused" },
            t = {
                section: ".shopify-section",
                wrapper: "#SlideshowWrapper-",
                slides: ".slideshow__slide",
                textWrapperMobile: ".slideshow__text-wrap--mobile",
                textContentMobile: ".slideshow__text-content--mobile",
                controls: ".slideshow__controls",
                pauseButton: ".slideshow__pause",
                dots: ".slick-dots",
                arrows: ".slideshow__arrows",
                arrowsMobile: ".slideshow__arrows--mobile",
                arrowLeft: ".slideshow__arrow-left",
                arrowRight: ".slideshow__arrow-right",
            };
        function i(i, n) {
            var s = (this.$slideshow = $(i));
            (this.adaptHeight = this.$slideshow.data("adapt-height")),
                (this.$wrapper = this.$slideshow.closest(t.wrapper + n)),
                (this.$section = this.$wrapper.closest(t.section)),
                (this.$controls = this.$wrapper.find(t.controls)),
                (this.$arrows = this.$section.find(t.arrows)),
                (this.$arrowsMobile = this.$section.find(t.arrowsMobile)),
                (this.$pause = this.$controls.find(t.pauseButton)),
                (this.$textWrapperMobile = this.$section.find(t.textWrapperMobile)),
                (this.autorotate = this.$slideshow.data("autorotate"));
            var o = this.$slideshow.data("speed"),
                r = this.$slideshow.data("slide-nav-a11y");
            (this.settings = {
                accessibility: !0,
                arrows: !1,
                dots: !0,
                fade: !0,
                draggable: !0,
                touchThreshold: 20,
                autoplay: this.autorotate,
                autoplaySpeed: o,
                appendDots: this.$arrows,
                customPaging: function (e, i) {
                    return '<a href="' + t.wrapper + n + '" aria-label="' + r.replace("[slide_number]", i + 1) + '" data-slide-number="' + i + '"></a>';
                },
            }),
                this.$slideshow.on(
                    "beforeChange",
                    function (t, i, a, n) {
                        var s = this.$dots.find("a"),
                            o = this.$mobileDots.find("li");
                        s.removeAttr("aria-current").eq(n).attr("aria-current", "true"), o.removeClass(e.slickActiveMobile).eq(n).addClass(e.slickActiveMobile), this.showMobileText(n);
                    }.bind(this)
                ),
                this.$slideshow.on(
                    "init",
                    function (i, n) {
                        var s = n.$slider,
                            o = n.$list;
                        (this.$dots = this.$section.find(t.dots)),
                            (this.$mobileDots = this.$dots.eq(1)),
                            o.removeAttr("aria-live"),
                            this.$wrapper.on("keyup", a.bind(this)),
                            this.$controls.on("keyup", a.bind(this)),
                            this.$textWrapperMobile.on("keyup", a.bind(this)),
                            this.$wrapper
                                .on(
                                    "focusin",
                                    function (e) {
                                        this.$wrapper.has(e.target).length && (o.attr("aria-live", "polite"), this.autorotate && s.slick("slickPause"));
                                    }.bind(this)
                                )
                                .on(
                                    "focusout",
                                    function (e) {
                                        this.$wrapper.has(e.target).length && (o.removeAttr("aria-live"), this.autorotate && (this.$pause.is(".is-paused") || s.slick("slickPlay")));
                                    }.bind(this)
                                ),
                            this.$dots &&
                                this.$dots
                                    .find("a")
                                    .each(function () {
                                        var e = $(this);
                                        e.on("click keyup", function (e) {
                                            if ("keyup" !== e.type || e.which === slate.utils.keyboardKeys.ENTER) {
                                                e.preventDefault();
                                                var t = $(e.target).data("slide-number");
                                                s.attr("tabindex", -1).slick("slickGoTo", t), "keyup" === e.type && s.focus();
                                            }
                                        });
                                    })
                                    .eq(0)
                                    .attr("aria-current", "true");
                        this.$controls
                            .on(
                                "focusin",
                                function () {
                                    this.$controls.addClass(e.controlsHover);
                                }.bind(this)
                            )
                            .on(
                                "focusout",
                                function () {
                                    this.$controls.removeClass(e.controlsHover);
                                }.bind(this)
                            );
                    }.bind(this)
                ),
                this.$slideshow.on(
                    "init",
                    function () {
                        this.$mobileDots.find("li:first-of-type").addClass(e.slickActiveMobile), this.showMobileText(0);
                    }.bind(this)
                ),
                this.autorotate &&
                    $(document).scroll(
                        $.debounce(
                            250,
                            function () {
                                this.$arrowsMobile.offset().top + this.$arrowsMobile.outerHeight() < window.pageYOffset ? s.slick("slickPause") : this.$pause.hasClass(e.isPaused) || s.slick("slickPlay");
                            }.bind(this)
                        )
                    ),
                this.adaptHeight && (this.setSlideshowHeight(), $(window).resize($.debounce(50, this.setSlideshowHeight.bind(this)))),
                this.$slideshow.slick(this.settings),
                function () {
                    this.$slideshow.find(t.slides).removeAttr("role").removeAttr("aria-labelledby"),
                        this.$dots
                            .removeAttr("role")
                            .find("li")
                            .removeAttr("role")
                            .removeAttr("aria-selected")
                            .each(function () {
                                var e = $(this),
                                    t = e.attr("aria-controls");
                                e.removeAttr("aria-controls").find("a").attr("aria-controls", t);
                            });
                }.bind(this)(),
                this.$arrows.find(t.arrowLeft).on("click", function () {
                    s.slick("slickPrev");
                }),
                this.$arrows.find(t.arrowRight).on("click", function () {
                    s.slick("slickNext");
                }),
                this.$pause.on("click", this.togglePause.bind(this));
        }
        function a() {
            event.keyCode === slate.utils.keyboardKeys.LEFTARROW && this.$slideshow.slick("slickPrev"), event.keyCode === slate.utils.keyboardKeys.RIGHTARROW && this.$slideshow.slick("slickNext");
        }
        return (
            (i.prototype.togglePause = function () {
                var t = "#Slideshow-" + this.$pause.data("id");
                this.$pause.hasClass(e.isPaused)
                    ? (this.$pause.removeClass(e.isPaused).attr("aria-pressed", "false"), this.autorotate && $(t).slick("slickPlay"))
                    : (this.$pause.addClass(e.isPaused).attr("aria-pressed", "true"), this.autorotate && $(t).slick("slickPause"));
            }),
            (i.prototype.setSlideshowHeight = function () {
                var e = this.$slideshow.data("min-aspect-ratio");
                this.$slideshow.height($(document).width() / e);
            }),
            (i.prototype.showMobileText = function (e) {
                var i = this.$textWrapperMobile.find(t.textContentMobile),
                    a = t.textContentMobile + "-" + e,
                    n = this.$textWrapperMobile.find(a);
                n.length || 1 !== this.$slideshow.find(t.slides).length ? this.$textWrapperMobile.show() : this.$textWrapperMobile.hide(), i.hide(), n.show();
            }),
            i
        );
    })()),
    (theme.Video = (function () {
        var e = !1,
            t = !1,
            i = !1,
            a = !1,
            n = !1,
            s = {},
            o = [],
            r = {
                ratio: 16 / 9,
                scrollAnimationDuration: 400,
                playerVars: { iv_load_policy: 3, modestbranding: 1, autoplay: 0, controls: 0, wmode: "opaque", branding: 0, autohide: 0, rel: 0 },
                events: {
                    onReady: function (e) {
                        e.target.setPlaybackQuality("hd1080");
                        var t = w(e);
                        m(), $("#" + t.id).attr("tabindex", "-1"), _(), "background" === t.type && (e.target.mute(), u(t.id));
                        t.$videoWrapper.addClass(c.loaded);
                    },
                    onStateChange: function (e) {
                        var t = w(e);
                        switch (e.data) {
                            case YT.PlayerState.ENDED:
                                !(function (e) {
                                    switch (e.type) {
                                        case "background":
                                            o[e.id].seekTo(0);
                                            break;
                                        case "image_with_play":
                                            g(e.id), b(e.id, !1);
                                    }
                                })(t);
                                break;
                            case YT.PlayerState.PAUSED:
                                setTimeout(function () {
                                    e.target.getPlayerState() === YT.PlayerState.PAUSED && f(t);
                                }, 200);
                        }
                    },
                },
            },
            c = {
                playing: "video-is-playing",
                paused: "video-is-paused",
                loading: "video-is-loading",
                loaded: "video-is-loaded",
                backgroundVideoWrapper: "video-background-wrapper",
                videoWithImage: "video--image_with_play",
                backgroundVideo: "video--background",
                userPaused: "is-paused",
                supportsAutoplay: "autoplay",
                supportsNoAutoplay: "no-autoplay",
                wrapperMinHeight: "video-section-wrapper--min-height",
            },
            d = { section: ".video-section", videoWrapper: ".video-section-wrapper", playVideoBtn: ".video-control__play", closeVideoBtn: ".video-control__close-wrapper", pauseVideoBtn: ".video__pause" };
        function l(e) {
            (i || a) && e && "function" == typeof o[e].playVideo && u(e);
        }
        function h(e) {
            o[e] && "function" == typeof o[e].pauseVideo && o[e].pauseVideo();
        }
        function u(i, n) {
            var r = s[i],
                d = o[i],
                l = r.$videoWrapper;
            if (a) v(r);
            else if (n || (e && t)) return l.removeClass(c.loading), v(r), void d.playVideo();
            e ||
                (function (i, a) {
                    i.playVideo(),
                        (function (e) {
                            var i,
                                a,
                                n = $.Deferred();
                            return (
                                (i = setInterval(function () {
                                    e.getCurrentTime() <= 0 || ((t = !0), clearInterval(i), clearTimeout(a), n.resolve());
                                }, 500)),
                                (a = setTimeout(function () {
                                    clearInterval(i), n.reject();
                                }, 4e3)),
                                n
                            );
                        })(i)
                            .then(function () {
                                p(!0);
                            })
                            .fail(function () {
                                p(!1), i.stopVideo();
                            })
                            .always(function () {
                                (e = !0), a.removeClass(c.loading);
                            });
                })(d, l);
        }
        function p(i) {
            var n = i ? c.supportsAutoplay : c.supportsNoAutoplay;
            $(document.documentElement).removeClass(c.supportsAutoplay).removeClass(c.supportsNoAutoplay).addClass(n), i ? (t = !0) : (a = !0), (e = !0);
        }
        function m() {
            i || (k() && (a = !0), a && p(!1), (i = !0));
        }
        function v(e) {
            var t = e.$videoWrapper,
                i = t.find(d.pauseVideoBtn);
            t.removeClass(c.loading),
                i.hasClass(c.userPaused) && i.removeClass(c.userPaused),
                "background" !== e.status &&
                    ($("#" + e.id).attr("tabindex", "0"),
                    "image_with_play" === e.type && t.removeClass(c.paused).addClass(c.playing),
                    setTimeout(function () {
                        t.find(d.closeVideoBtn).focus();
                    }, r.scrollAnimationDuration));
        }
        function f(e) {
            var t = e.$videoWrapper;
            "image_with_play" === e.type && ("closed" === e.status ? t.removeClass(c.paused) : t.addClass(c.paused)), t.removeClass(c.playing);
        }
        function g(e) {
            var t = s[e],
                i = t.$videoWrapper,
                a = [c.paused, c.playing].join(" ");
            switch ((k() && i.removeAttr("style"), $("#" + t.id).attr("tabindex", "-1"), (t.status = "closed"), t.type)) {
                case "image_with_play":
                    o[e].stopVideo(), f(t);
                    break;
                case "background":
                    o[e].mute(),
                        (function (e) {
                            $("#" + e)
                                .removeClass(c.videoWithImage)
                                .addClass(c.backgroundVideo),
                                s[e].$videoWrapper.addClass(c.backgroundVideoWrapper),
                                (s[e].status = "background"),
                                C($("#" + e));
                        })(e);
            }
            i.removeClass(a);
        }
        function w(e) {
            return s[e.target.a.id];
        }
        function b(e, t) {
            var i = s[e],
                a = i.$videoWrapper.offset().top,
                n = 0,
                o = 0;
            k() && i.$videoWrapper.parent().toggleClass("page-width", !t),
                t
                    ? ((o = k() ? $(window).width() / r.ratio : i.$videoWrapper.width() / r.ratio),
                      (n = ($(window).height() - o) / 2),
                      i.$videoWrapper.removeClass(c.wrapperMinHeight).animate({ height: o }, 600),
                      (k() && Shopify.designMode) || $("html, body").animate({ scrollTop: a - n }, r.scrollAnimationDuration))
                    : ((o = k() ? i.$videoWrapper.data("mobile-height") : i.$videoWrapper.data("desktop-height")),
                      i.$videoWrapper.height(i.$videoWrapper.width() / r.ratio).animate({ height: o }, 600),
                      setTimeout(function () {
                          i.$videoWrapper.addClass(c.wrapperMinHeight);
                      }, 600));
        }
        function y(e) {
            var t = s[e];
            switch ((t.$videoWrapper.addClass(c.loading), t.$videoWrapper.attr("style", "height: " + t.$videoWrapper.height() + "px"), (t.status = "open"), t.type)) {
                case "image_with_play":
                    u(e, !0);
                    break;
                case "background":
                    !(function (e) {
                        $("#" + e)
                            .removeClass(c.backgroundVideo)
                            .addClass(c.videoWithImage),
                            setTimeout(function () {
                                $("#" + e).removeAttr("style");
                            }, 600),
                            s[e].$videoWrapper.removeClass(c.backgroundVideoWrapper).addClass(c.playing),
                            (s[e].status = "open");
                    })(e),
                        o[e].unMute(),
                        u(e, !0);
            }
            b(e, !0),
                $(document).on("keydown.videoPlayer", function (e) {
                    var t = $(document.activeElement).data("controls");
                    e.keyCode === slate.utils.keyboardKeys.ESCAPE && t && (g(t), b(t, !1));
                });
        }
        function _() {
            $("." + c.backgroundVideo).each(function (e, t) {
                C($(t));
            });
        }
        function C(e) {
            if (n)
                if (k()) e.removeAttr("style");
                else {
                    var t = e.closest(d.videoWrapper),
                        i = t.width(),
                        a = e.width(),
                        s = t.data("desktop-height");
                    i / r.ratio < s
                        ? ((a = Math.ceil(s * r.ratio)),
                          e
                              .width(a)
                              .height(s)
                              .css({ left: (i - a) / 2, top: 0 }))
                        : ((s = Math.ceil(i / r.ratio)),
                          e
                              .width(i)
                              .height(s)
                              .css({ left: 0, top: (s - s) / 2 })),
                        e.prepareTransition(),
                        t.addClass(c.loaded);
                }
        }
        function k() {
            return $(window).width() < 750 || window.mobileCheck();
        }
        function S() {
            $(document).on("click.videoPlayer", d.playVideoBtn, function (e) {
                y($(e.currentTarget).data("controls"));
            }),
                $(document).on("click.videoPlayer", d.closeVideoBtn, function (e) {
                    var t = $(e.currentTarget).data("controls");
                    $(e.currentTarget).blur(), g(t), b(t, !1);
                }),
                $(document).on("click.videoPlayer", d.pauseVideoBtn, function (e) {
                    !(function (e) {
                        var t = s[e].$videoWrapper.find(d.pauseVideoBtn);
                        t.hasClass(c.userPaused) ? (t.removeClass(c.userPaused), l(e)) : (t.addClass(c.userPaused), h(e));
                    })($(e.currentTarget).data("controls"));
                }),
                $(window).on(
                    "resize.videoPlayer",
                    $.debounce(200, function () {
                        if (n) {
                            var e,
                                t = window.innerHeight === screen.height;
                            if ((_(), k())) {
                                for (e in s) s.hasOwnProperty(e) && (s[e].$videoWrapper.hasClass(c.playing) && (t || (h(e), f(s[e]))), s[e].$videoWrapper.height($(document).width() / r.ratio));
                                p(!1);
                            } else for (e in (p(!0), s)) s[e].$videoWrapper.find("." + c.videoWithImage).length || (o[e].playVideo(), v(s[e]));
                        }
                    })
                ),
                $(window).on(
                    "scroll.videoPlayer",
                    $.debounce(50, function () {
                        if (n)
                            for (var e in s)
                                if (s.hasOwnProperty(e)) {
                                    var t = s[e].$videoWrapper;
                                    t.hasClass(c.playing) && (t.offset().top + 0.75 * t.height() < $(window).scrollTop() || t.offset().top + 0.25 * t.height() > $(window).scrollTop() + $(window).height()) && (g(e), b(e, !1));
                                }
                    })
                );
        }
        function T(e) {
            var t = $.extend({}, r, s[e]);
            (t.playerVars.controls = t.controls), (o[e] = new YT.Player(e, t));
        }
        return {
            init: function (e) {
                if (e.length) {
                    if (
                        ((s[e.attr("id")] = {
                            id: e.attr("id"),
                            videoId: e.data("id"),
                            type: e.data("type"),
                            status: "image_with_play" === e.data("type") ? "closed" : "background",
                            $video: e,
                            $videoWrapper: e.closest(d.videoWrapper),
                            $section: e.closest(d.section),
                            controls: "background" === e.data("type") ? 0 : 1,
                        }),
                        !n)
                    ) {
                        var t = document.createElement("script");
                        t.src = "https://www.youtube.com/iframe_api";
                        var i = document.getElementsByTagName("script")[0];
                        i.parentNode.insertBefore(t, i);
                    }
                    m();
                }
            },
            editorLoadVideo: function (e) {
                n && (T(e), S());
            },
            loadVideos: function () {
                for (var e in s) s.hasOwnProperty(e) && T(e);
                S(), (n = !0);
            },
            playVideo: l,
            pauseVideo: h,
            removeEvents: function () {
                $(document).off(".videoPlayer"), $(window).off(".videoPlayer");
            },
        };
    })()),
    (window.theme = window.theme || {}),
    (theme.FormStatus = (function () {
        var e = { statusMessage: "[data-form-status]" };
        return {
            init: function () {
                (this.$statusMessage = $(e.statusMessage)),
                    this.$statusMessage &&
                        (this.$statusMessage.attr("tabindex", -1).focus(),
                        this.$statusMessage.on(
                            "blur",
                            function () {
                                this.$statusMessage.removeAttr("tabindex");
                            }.bind(this)
                        ));
            },
        };
    })()),
    (function () {
        var e = $("#BlogTagFilter");
        e.length &&
            e.on("change", function () {
                location.href = $(this).val();
            });
    })(),
    (window.theme = theme || {}),
    (theme.customerTemplates = (function () {
        var e = { RecoverHeading: "#RecoverHeading", RecoverEmail: "#RecoverEmail", LoginHeading: "#LoginHeading" };
        function t() {
            (this.$RecoverHeading = $(e.RecoverHeading)),
                (this.$RecoverEmail = $(e.RecoverEmail)),
                (this.$LoginHeading = $(e.LoginHeading)),
                $("#RecoverPassword").on(
                    "click",
                    function (e) {
                        e.preventDefault(), i(), this.$RecoverHeading.attr("tabindex", "-1").focus();
                    }.bind(this)
                ),
                $("#HideRecoverPasswordLink").on(
                    "click",
                    function (e) {
                        e.preventDefault(), $("#RecoverPasswordForm").addClass("hide"), $("#CustomerLoginForm").removeClass("hide"), this.$LoginHeading.attr("tabindex", "-1").focus();
                    }.bind(this)
                ),
                this.$RecoverHeading.on("blur", function () {
                    $(this).removeAttr("tabindex");
                }),
                this.$LoginHeading.on("blur", function () {
                    $(this).removeAttr("tabindex");
                });
        }
        function i() {
            $("#RecoverPasswordForm").removeClass("hide"), $("#CustomerLoginForm").addClass("hide"), "true" === this.$RecoverEmail.attr("aria-invalid") && this.$RecoverEmail.focus();
        }
        return {
            init: function () {
                var e, a;
                t(),
                    (function () {
                        "#recover" === window.location.hash && i.bind(this)();
                    })(),
                    $(".reset-password-success").length && $("#ResetSuccess").removeClass("hide").focus(),
                    (e = $("#AddressNewForm")),
                    (a = $("#AddressNewButton")),
                    e.length &&
                        (Shopify && new Shopify.CountryProvinceSelector("AddressCountryNew", "AddressProvinceNew", { hideElement: "AddressProvinceContainerNew" }),
                        $(".address-country-option").each(function () {
                            var e = $(this).data("form-id"),
                                t = "AddressCountry_" + e,
                                i = "AddressProvince_" + e,
                                a = "AddressProvinceContainer_" + e;
                            new Shopify.CountryProvinceSelector(t, i, { hideElement: a });
                        }),
                        $(".address-new-toggle").on("click", function () {
                            var t = "true" === a.attr("aria-expanded");
                            e.toggleClass("hide"), a.attr("aria-expanded", !t).focus();
                        }),
                        $(".address-edit-toggle").on("click", function () {
                            var e = $(this).data("form-id"),
                                t = $("#EditFormButton_" + e),
                                i = $("#EditAddress_" + e),
                                a = "true" === t.attr("aria-expanded");
                            i.toggleClass("hide"), t.attr("aria-expanded", !a).focus();
                        }),
                        $(".address-delete").on("click", function () {
                            var e = $(this),
                                t = e.data("form-id"),
                                i = e.data("confirm-message");
                            confirm(i || "Are you sure you wish to delete this address?") && Shopify.postLink("/account/addresses/" + t, { parameters: { _method: "delete" } });
                        }));
            },
        };
    })()),
    (window.theme = window.theme || {}),
    (theme.Cart = (function () {
        var e = { edit: ".js-edit-toggle", inputQty: ".cart__qty-input", thumbnails: ".cart__image", item: ".cart__row" },
            t = { showClass: "cart__update--show", showEditClass: "cart__edit--active", cartNoCookies: "cart--no-cookies" };
        function i(i) {
            (this.$container = $(i)),
                (this.$edit = $(e.edit, this.$container)),
                (this.$inputQuantities = $(e.inputQty, this.$container)),
                (this.$thumbnails = $(e.thumbnails, this.$container)),
                this.cookiesEnabled() || this.$container.addClass(t.cartNoCookies),
                this.$edit.on("click", this._onEditClick),
                this.$inputQuantities.on("change", this._handleInputQty),
                this.$thumbnails.css("cursor", "pointer"),
                this.$thumbnails.on("click", this._handleThumbnailClick);
        }
        return (
            (i.prototype = _.assignIn({}, i.prototype, {
                onUnload: function () {
                    this.$edit.off("click", this._onEditClick);
                },
                _onEditClick: function (e) {
                    var i = $(e.target),
                        a = $("." + i.data("target")),
                        n = "true" === i.attr("aria-expanded");
                    i.toggleClass(t.showEditClass).attr("aria-expanded", !n), a.toggleClass(t.showClass);
                },
                _handleInputQty: function (e) {
                    var t = $(e.target),
                        i = t.val(),
                        a = t.data("quantity-item");
                    $("[data-quantity-item=" + a + "]").val(i);
                },
                _handleThumbnailClick: function (e) {
                    var t = $(e.target).data("item-url");
                    window.location.href = t;
                },
                cookiesEnabled: function () {
                    var e = navigator.cookieEnabled;
                    return e || ((document.cookie = "testcookie"), (e = -1 !== document.cookie.indexOf("testcookie"))), e;
                },
            })),
            i
        );
    })()),
    (window.theme = window.theme || {}),
    (theme.Filters = (function () {
        var e = "screen and (min-width: 750px)",
            t = "sort_by",
            i = { mainContent: "#MainContent", filterSelection: "#FilterTags", sortSelection: "#SortBy" },
            a = "data-default-sortby";
        function n(e) {
            var t = (this.$container = $(e));
            (this.$filterSelect = $(i.filterSelection, t)),
                (this.$sortSelect = $(i.sortSelection, t)),
                (this.$selects = $(i.filterSelection, t).add($(i.sortSelection, t))),
                (this.defaultSort = this._getDefaultSortValue()),
                this.$selects.removeClass("hidden"),
                this.$filterSelect.on("change", this._onFilterChange.bind(this)),
                this.$sortSelect.on("change", this._onSortChange.bind(this)),
                this._initBreakpoints();
        }
        return (
            (n.prototype = _.assignIn({}, n.prototype, {
                _initBreakpoints: function () {
                    var t = this;
                    enquire.register(e, {
                        match: function () {
                            t._resizeSelect(t.$selects);
                        },
                    });
                },
                _onSortChange: function () {
                    var e = this._sortValue(),
                        t = window.location.href.replace(window.location.search, ""),
                        a = slate.utils.getParameterByName("q"),
                        n = null !== a ? a : "";
                    if (e.length) {
                        var s = t.replace(window.location.hash, "");
                        (n = "" !== n ? "?q=" + n + "&" : "?"), (window.location.href = s + n + e + i.mainContent);
                    } else window.location.href = t;
                },
                _onFilterChange: function () {
                    var e = this._getFilterValue(),
                        t = document.location.search.replace(/\?(page=\w+)?&?/, "");
                    (t = "" !== t ? "?" + t : ""), (document.location.href = e + t + i.mainContent);
                },
                _getFilterValue: function () {
                    return this.$filterSelect.val();
                },
                _getSortValue: function () {
                    return this.$sortSelect.val() || this.defaultSort;
                },
                _getDefaultSortValue: function () {
                    return this.$sortSelect.attr(a);
                },
                _sortValue: function () {
                    var e = this._getSortValue(),
                        i = "";
                    return e !== this.defaultSort && (i = t + "=" + e), i;
                },
                _resizeSelect: function (e) {
                    e.each(function () {
                        var e = $(this),
                            t = e.find("option:selected").text(),
                            i = $("<span>").html(t);
                        i.appendTo("body");
                        var a = i.width();
                        i.remove(), e.width(a + 10);
                    });
                },
                onUnload: function () {
                    this.$filterSelect.off("change", this._onFilterChange), this.$sortSelect.off("change", this._onSortChange);
                },
            })),
            n
        );
    })()),
    (window.theme = window.theme || {}),
    (theme.HeaderSection = (function () {
        function e() {
            theme.Header.init(), theme.MobileNav.init(), theme.Search.init();
        }
        return (
            (e.prototype = _.assignIn({}, e.prototype, {
                onUnload: function () {
                    theme.Header.unload();
                },
            })),
            e
        );
    })()),
    (theme.Maps = (function () {
        var e = 14,
            t = null,
            i = [],
            a = { addressNoResults: theme.strings.addressNoResults, addressQueryLimit: theme.strings.addressQueryLimit, addressError: theme.strings.addressError, authError: theme.strings.authError },
            n = { section: '[data-section-type="map"]', map: "[data-map]", mapOverlay: "[data-map-overlay]" },
            s = "map-section--load-error",
            o = "map-section__error errors text-center";
        function r(e) {
            (this.$container = $(e)),
                (this.$map = this.$container.find(n.map)),
                (this.key = this.$map.data("api-key")),
                void 0 !== this.key &&
                    ("loaded" === t
                        ? this.createMap()
                        : (i.push(this),
                          "loading" !== t &&
                              ((t = "loading"),
                              void 0 === window.google &&
                                  $.getScript("https://maps.googleapis.com/maps/api/js?key=" + this.key).then(function () {
                                      (t = "loaded"),
                                          $.each(i, function (e, t) {
                                              t.createMap();
                                          });
                                  }))));
        }
        return (
            (window.gm_authFailure = function () {
                Shopify.designMode && ($(n.section).addClass(s), $(n.map).remove(), $(n.mapOverlay).after('<div class="' + o + '">' + theme.strings.authError + "</div>"));
            }),
            (r.prototype = _.assignIn({}, r.prototype, {
                createMap: function () {
                    var t = this.$map;
                    return (function (e) {
                        var t = $.Deferred(),
                            i = new google.maps.Geocoder(),
                            a = e.data("address-setting");
                        return (
                            i.geocode({ address: a }, function (e, i) {
                                i !== google.maps.GeocoderStatus.OK && t.reject(i), t.resolve(e);
                            }),
                            t
                        );
                    })(t)
                        .then(
                            function (i) {
                                var a = { zoom: e, center: i[0].geometry.location, draggable: !1, clickableIcons: !1, scrollwheel: !1, disableDoubleClickZoom: !0, disableDefaultUI: !0 },
                                    n = (this.map = new google.maps.Map(t[0], a)),
                                    s = (this.center = n.getCenter());
                                new google.maps.Marker({ map: n, position: n.getCenter() });
                                google.maps.event.addDomListener(
                                    window,
                                    "resize",
                                    $.debounce(250, function () {
                                        google.maps.event.trigger(n, "resize"), n.setCenter(s), t.removeAttr("style");
                                    })
                                );
                            }.bind(this)
                        )
                        .fail(function () {
                            var e;
                            switch (status) {
                                case "ZERO_RESULTS":
                                    e = a.addressNoResults;
                                    break;
                                case "OVER_QUERY_LIMIT":
                                    e = a.addressQueryLimit;
                                    break;
                                case "REQUEST_DENIED":
                                    e = a.authError;
                                    break;
                                default:
                                    e = a.addressError;
                            }
                            Shopify.designMode &&
                                t
                                    .parent()
                                    .addClass(s)
                                    .html('<div class="' + o + '">' + e + "</div>");
                        });
                },
                onUnload: function () {
                    0 !== this.$map.length && google.maps.event.clearListeners(this.map, "resize");
                },
            })),
            r
        );
    })()),
    (theme.Product = (function () {
        function e(e) {
            var t = (this.$container = $(e)),
                i = t.attr("data-section-id");
            (this.settings = {
                mediaQueryMediumUp: "screen and (min-width: 750px)",
                mediaQuerySmall: "screen and (max-width: 749px)",
                bpSmall: !1,
                enableHistoryState: t.data("enable-history-state") || !1,
                namespace: ".slideshow-" + i,
                sectionId: i,
                sliderActive: !1,
                zoomEnabled: !1,
            }),
                (this.selectors = {
                    addToCart: "#AddToCart-" + i,
                    addToCartText: "#AddToCartText-" + i,
                    errorQuantityMessage: "#error-quantity-" + i,
                    quantity: "#Quantity-" + i,
                    SKU: ".variant-sku",
                    productStatus: "[data-product-status]",
                    originalSelectorId: "#ProductSelect-" + i,
                    productImageWraps: ".product-single__photo",
                    productThumbImages: ".product-single__thumbnail--" + i,
                    productThumbs: ".product-single__thumbnails-" + i,
                    productThumbListItem: ".product-single__thumbnails-item",
                    productFeaturedImage: ".product-featured-img",
                    productThumbsWrapper: ".thumbnails-wrapper",
                    saleLabel: ".product-price__sale-label-" + i,
                    singleOptionSelector: ".single-option-selector-" + i,
                    shopifyPaymentButton: ".shopify-payment-button",
                    priceContainer: "[data-price]",
                    regularPrice: "[data-regular-price]",
                    salePrice: "[data-sale-price]",
                }),
                (this.classes = { hidden: "hide", productOnSale: "price--on-sale", productUnavailable: "price--unavailable", activeClass: "active-thumb" }),
                $("#ProductJson-" + i).html() &&
                    ((this.productSingleObject = JSON.parse(document.getElementById("ProductJson-" + i).innerHTML)),
                    (this.settings.zoomEnabled = $(this.selectors.productImageWraps).hasClass("js-zoom-enabled")),
                    this._initBreakpoints(),
                    this._stringOverrides(),
                    this._initVariants(),
                    this._initImageSwitch(),
                    this._initAddToCart(),
                    this._setActiveThumbnail());
        }
        return (
            (e.prototype = _.assignIn({}, e.prototype, {
                _stringOverrides: function () {
                    (theme.productStrings = theme.productStrings || {}), $.extend(theme.strings, theme.productStrings);
                },
                _initBreakpoints: function () {
                    var e = this;
                    enquire.register(this.settings.mediaQuerySmall, {
                        match: function () {
                            $(e.selectors.productThumbImages).length > 3 && e._initThumbnailSlider(),
                                e.settings.zoomEnabled &&
                                    $(e.selectors.productImageWraps).each(function () {
                                        $(this).trigger("zoom.destroy");
                                    }),
                                (e.settings.bpSmall = !0);
                        },
                        unmatch: function () {
                            e.settings.sliderActive && e._destroyThumbnailSlider(), (e.settings.bpSmall = !1);
                        },
                    }),
                        enquire.register(this.settings.mediaQueryMediumUp, {
                            match: function () {
                                e.settings.zoomEnabled &&
                                    $(e.selectors.productImageWraps).each(function () {
                                        var e, t;
                                        (e = this), (t = $(e).data("zoom")), $(e).zoom({ url: t });
                                    });
                            },
                        });
                },
                _initVariants: function () {
                    var e = {
                        $container: this.$container,
                        enableHistoryState: this.$container.data("enable-history-state") || !1,
                        singleOptionSelector: this.selectors.singleOptionSelector,
                        originalSelectorId: this.selectors.originalSelectorId,
                        product: this.productSingleObject,
                    };
                    (this.variants = new slate.Variants(e)),
                        this.$container.on("variantChange" + this.settings.namespace, this._updateAvailability.bind(this)),
                        this.$container.on("variantImageChange" + this.settings.namespace, this._updateImages.bind(this)),
                        this.$container.on("variantPriceChange" + this.settings.namespace, this._updatePrice.bind(this)),
                        this.$container.on("variantSKUChange" + this.settings.namespace, this._updateSKU.bind(this));
                },
                _initImageSwitch: function () {
                    if ($(this.selectors.productThumbImages).length) {
                        var e = this;
                        $(this.selectors.productThumbImages)
                            .on("click", function (t) {
                                t.preventDefault();
                                var i = $(this).data("thumbnail-id");
                                e._switchImage(i), e._setActiveThumbnail(i);
                            })
                            .on("keyup", e._handleImageFocus.bind(e));
                    }
                },
                _initAddToCart: function () {
                    var e = this,
                        t = $(e.selectors.quantity);
                    0 !== t.length &&
                        $(e.selectors.addToCart).on("click", function (i) {
                            var a = t.val() <= 0;
                            $(e.selectors.errorQuantityMessage).toggleClass(e.classes.hidden, !a),
                                a
                                    ? (t.attr("aria-describedby", "error-quantity-" + e.settings.sectionId).attr("aria-invalid", !0), $(e.selectors.errorQuantityMessage).focus(), i.preventDefault())
                                    : t.removeAttr("aria-describedby").removeAttr("aria-invalid");
                        });
                },
                _setActiveThumbnail: function (e) {
                    void 0 === e && (e = $(this.selectors.productImageWraps + ":not(.hide)", this.$container).data("image-id"));
                    var t = $(this.selectors.productThumbListItem + ":not(.slick-cloned)", this.$container),
                        i = t.find(this.selectors.productThumbImages + "[data-thumbnail-id='" + e + "']");
                    if (($(this.selectors.productThumbImages).removeClass(this.classes.activeClass).removeAttr("aria-current"), i.addClass(this.classes.activeClass), i.attr("aria-current", !0), t.hasClass("slick-slide"))) {
                        var a = i.parent().data("slick-index");
                        $(this.selectors.productThumbs).slick("slickGoTo", a, !0);
                    }
                },
                _switchImage: function (e) {
                    var t = $(this.selectors.productImageWraps + "[data-image-id='" + e + "']", this.$container),
                        i = $(this.selectors.productImageWraps + ":not([data-image-id='" + e + "'])", this.$container);
                    t.removeClass(this.classes.hidden), i.addClass(this.classes.hidden);
                },
                _handleImageFocus: function (e) {
                    e.keyCode === slate.utils.keyboardKeys.ENTER && $(this.selectors.productFeaturedImage + ":visible").focus();
                },
                _initThumbnailSlider: function () {
                    var e = {
                        slidesToShow: 4,
                        slidesToScroll: 3,
                        infinite: !1,
                        prevArrow: ".thumbnails-slider__prev--" + this.settings.sectionId,
                        nextArrow: ".thumbnails-slider__next--" + this.settings.sectionId,
                        responsive: [{ breakpoint: 321, settings: { slidesToShow: 3 } }],
                    };
                    $(this.selectors.productThumbs).slick(e),
                        $(this.selectors.productThumbsWrapper, this.$container).find(".slick-list").removeAttr("aria-live"),
                        $(this.selectors.productThumbsWrapper, this.$container).find(".slick-disabled").removeAttr("aria-disabled"),
                        (this.settings.sliderActive = !0);
                },
                _destroyThumbnailSlider: function () {
                    $(this.selectors.productThumbs).slick("unslick"), (this.settings.sliderActive = !1), $(this.selectors.productThumbsWrapper, this.$container).find('[tabindex="-1"]').removeAttr("tabindex");
                },
                _liveRegionText: function (e) {
                    var t = "[Availability] [Regular] [$$] [Sale] [$]";
                    if (!e) return (t = theme.strings.unavailable);
                    var i = e.available ? "" : theme.strings.soldOut + ",";
                    t = t.replace("[Availability]", i);
                    var a = "",
                        n = theme.Currency.formatMoney(e.price, theme.moneyFormat),
                        s = "",
                        o = "";
                    return (
                        e.compare_at_price > e.price &&
                            ((a = theme.strings.regularPrice), (n = theme.Currency.formatMoney(e.compare_at_price, theme.moneyFormat) + ","), (s = theme.strings.sale), (o = theme.Currency.formatMoney(e.price, theme.moneyFormat))),
                        (t = t.replace("[Regular]", a).replace("[$$]", n).replace("[Sale]", s).replace("[$]", o).trim())
                    );
                },
                _updateLiveRegion: function (e) {
                    var t = e.variant,
                        i = this.container.querySelector(this.selectors.productStatus);
                    (i.textContent = this._liveRegionText(t)),
                        i.setAttribute("aria-hidden", !1),
                        setTimeout(function () {
                            i.setAttribute("aria-hidden", !0);
                        }, 1e3);
                },
                _updateAddToCart: function (e) {
                    var t = e.variant;
                    t
                        ? t.available
                            ? ($(this.selectors.addToCart).prop("disabled", !1), $(this.selectors.addToCartText).text(theme.strings.addToCart), $(this.selectors.shopifyPaymentButton, this.$container).show())
                            : ($(this.selectors.addToCart).prop("disabled", !0), $(this.selectors.addToCartText).text(theme.strings.soldOut), $(this.selectors.shopifyPaymentButton, this.$container).hide())
                        : ($(this.selectors.addToCart).prop("disabled", !0), $(this.selectors.addToCartText).text(theme.strings.unavailable), $(this.selectors.shopifyPaymentButton, this.$container).hide());
                },
                _updateAvailability: function (e) {
                    this._updateAddToCart(e), this._updateLiveRegion(e), this._updatePrice(e);
                },
                _updateImages: function (e) {
                    var t = e.variant.featured_image.id;
                    this._switchImage(t), this._setActiveThumbnail(t);
                },
                _updatePrice: function (e) {
                    var t = e.variant,
                        i = $(this.selectors.priceContainer, this.$container),
                        a = $(this.selectors.regularPrice, i),
                        n = $(this.selectors.salePrice, i);
                    i.removeClass(this.classes.productUnavailable).removeClass(this.classes.productOnSale).removeAttr("aria-hidden"),
                        t
                            ? t.compare_at_price > t.price
                                ? (a.html(theme.Currency.formatMoney(t.compare_at_price, theme.moneyFormat)), n.html(theme.Currency.formatMoney(t.price, theme.moneyFormat)), i.addClass(this.classes.productOnSale))
                                : a.html(theme.Currency.formatMoney(t.price, theme.moneyFormat))
                            : i.addClass(this.classes.productUnavailable).attr("aria-hidden", !0);
                },
                _updateSKU: function (e) {
                    var t = e.variant;
                    $(this.selectors.SKU).html(t.sku);
                },
                onUnload: function () {
                    this.$container.off(this.settings.namespace);
                },
            })),
            e
        );
    })()),
    (theme.Quotes = (function () {
        var e = { mediaQuerySmall: "screen and (max-width: 749px)", mediaQueryMediumUp: "screen and (min-width: 750px)", slideCount: 0 },
            t = { accessibility: !0, arrows: !1, dots: !0, autoplay: !1, touchThreshold: 20, slidesToShow: 3, slidesToScroll: 3 };
        function i(i) {
            var a = (this.$container = $(i)).attr("data-section-id"),
                n = (this.wrapper = ".quotes-wrapper"),
                s = (this.slider = "#Quotes-" + a),
                o = $(s, n),
                r = !1,
                c = $.extend({}, t, { slidesToShow: 1, slidesToScroll: 1, adaptiveHeight: !0 });
            function d(e, t) {
                r && (e.slick("unslick"), (r = !1)), e.slick(t), (r = !0);
            }
            (e.slideCount = o.data("count")),
                e.slideCount < t.slidesToShow && ((t.slidesToShow = e.slideCount), (t.slidesToScroll = e.slideCount)),
                o.on("init", this.a11y.bind(this)),
                enquire.register(e.mediaQuerySmall, {
                    match: function () {
                        d(o, c);
                    },
                }),
                enquire.register(e.mediaQueryMediumUp, {
                    match: function () {
                        d(o, t);
                    },
                });
        }
        return (
            (i.prototype = _.assignIn({}, i.prototype, {
                onUnload: function () {
                    enquire.unregister(e.mediaQuerySmall), enquire.unregister(e.mediaQueryMediumUp), $(this.slider, this.wrapper).slick("unslick");
                },
                onBlockSelect: function (e) {
                    var t = $(".quotes-slide--" + e.detail.blockId + ":not(.slick-cloned)").data("slick-index");
                    $(this.slider, this.wrapper).slick("slickGoTo", t);
                },
                a11y: function (e, t) {
                    var i = t.$list,
                        a = $(this.wrapper, this.$container);
                    i.removeAttr("aria-live"),
                        a.on("focusin", function (e) {
                            a.has(e.target).length && i.attr("aria-live", "polite");
                        }),
                        a.on("focusout", function (e) {
                            a.has(e.target).length && i.removeAttr("aria-live");
                        });
                },
            })),
            i
        );
    })()),
    (theme.slideshows = {}),
    (theme.SlideshowSection = (function () {
        return function (e) {
            var t = (this.$container = $(e)).attr("data-section-id"),
                i = (this.slideshow = "#Slideshow-" + t);
            theme.slideshows[i] = new theme.Slideshow(i, t);
        };
    })()),
    (theme.SlideshowSection.prototype = _.assignIn({}, theme.SlideshowSection.prototype, {
        onUnload: function () {
            delete theme.slideshows[this.slideshow];
        },
        onBlockSelect: function (e) {
            var t = $(this.slideshow);
            t.data("adapt-height") && theme.slideshows[this.slideshow].setSlideshowHeight();
            var i = $(".slideshow__slide--" + e.detail.blockId + ":not(.slick-cloned)").data("slick-index");
            t.slick("slickGoTo", i).slick("slickPause");
        },
        onBlockDeselect: function () {
            $(this.slideshow).slick("slickPlay");
        },
    })),
    (theme.slideshows = {}),
    (theme.VideoSection = (function () {
        return function (e) {
            var t = (this.$container = $(e));
            $(".video", t).each(function () {
                var e = $(this);
                theme.Video.init(e), theme.Video.editorLoadVideo(e.attr("id"));
            });
        };
    })()),
    (theme.VideoSection.prototype = _.assignIn({}, theme.VideoSection.prototype, {
        onUnload: function () {
            theme.Video.removeEvents();
        },
    })),
    $(document).ready(function () {
        var e = new theme.Sections();
        e.register("cart-template", theme.Cart),
            e.register("product", theme.Product),
            e.register("collection-template", theme.Filters),
            e.register("product-template", theme.Product),
            e.register("header-section", theme.HeaderSection),
            e.register("map", theme.Maps),
            e.register("slideshow-section", theme.SlideshowSection),
            e.register("video-section", theme.VideoSection),
            e.register("quotes", theme.Quotes);
    }),
    (theme.init = function () {
        theme.customerTemplates.init();
        slate.rte.wrapTable({ $tables: $(".rte table,.custom__item-inner--html table"), tableWrapperClass: "scrollable-wrapper" });
        slate.rte.wrapIframe({
            $iframes: $('.rte iframe[src*="youtube.com/embed"],.rte iframe[src*="player.vimeo"],.custom__item-inner--html iframe[src*="youtube.com/embed"],.custom__item-inner--html iframe[src*="player.vimeo"]'),
            iframeWrapperClass: "video-wrapper",
        }),
            slate.a11y.pageLinkFocus($(window.location.hash)),
            $(".in-page-link").on("click", function (e) {
                slate.a11y.pageLinkFocus($(e.currentTarget.hash));
            }),
            $('a[href="#"]').on("click", function (e) {
                e.preventDefault();
            }),
            slate.a11y.accessibleLinks({
                messages: { newWindow: theme.strings.newWindow, external: theme.strings.external, newWindowExternal: theme.strings.newWindowExternal },
                $links: $("a[href]:not([aria-describedby], .product-single__thumbnail)"),
            }),
            theme.FormStatus.init();
    }),
    $(theme.init);